README

group-28: MAGIC
group-members: eronning, aelangov, amolinaa, fheredea, qherrera

#########################################################################################################################################################

Access control vulnerability

ATTACK: 

Attacker is capable of directly accessing the benefits page without being an admin. This is because
there is no authentication for the page. (FOUND -- app/routes/index.js)

DEFEND:

Server needs to authenticate each request for the benefits page and verify that the user attempting to
access that page has the appropriate privelages.

#########################################################################################################################################################

Direct object reference vulnerability

ATTACK:

An attacker is capable of directly accessing the allocation of any other user. There is because there is no authentication
at each page for who each user is. (FOUND -- app/routes/allocations.js)

DEFEND:

The server needs to authenticate each request for each different users allocation page and verify that the
user is attempting to access only their allocation page.

#########################################################################################################################################################

Unvalidated redirect vulnerability

ATTACK:

An attacker is capable of directly modifying the parameter of a url for the site. This allows the attacker
to make a insecure redirect on the website. Such as http://cs132security-group28.herokuapp.com/learn?url="malicioussitehere". (FOUND -- app/routes/index.js)

DEFEND:

In this case, the defending could be done by handling the entire redirect on the backend portion of the site. This is because the website already knows
what site that it wants to redirect to for the learn button (FOUND -- app/views/layout.html). This means that nothing needs to be sent through the url. 
The site can just directly redirect to wherever it wants.

#########################################################################################################################################################

JavaScript injection vulnerability

ATTACK:

There is a spot on the site where input is directly evaluated. This allows for javascript code such as
a infite while loop (while(1);) or an exit statement to be able to directly be entered into the eval statement.
Our group used: res.end(require('fs').readdirSync('.').toString()) in order to display metadata about the server. (FOUND -- app/routes/contributions.js)

DEFEND:

This could have been prevented by validating the user input on the server side before processing. The site could have
not used the eval function and instead used a parsing function. The strict keyword could have been used in order to limit
the function scope.

#########################################################################################################################################################

CSRF vulnerability

ATTACK:

An authentication token of the website can be used by another website. For example if a current user is logged
in and authenticated to a website. Then the user browses to another website. This other website could have malicious information
such that it sends a request to the website the user is logged into in order to impersonate as the current user. This allows
the attacker to act as the current user. (FOUND -- server.js and frontend views)

DEFEND:

This could have been defended against by using the csrf middleware module. This would have created a token to disallow requests
that don't contain the csrf token. This prevents just anyone from sending a request to the site even with an authentication token
for the site (the csrf token would be required as well).

#########################################################################################################################################################
